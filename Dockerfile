# Используем официальный образ Go как базовый для сборки
FROM golang:1.21 as builder

# Устанавливаем рабочую директорию внутри контейнера
WORKDIR /app

# Копируем файлы go.mod и go.sum для управления зависимостями
COPY go.mod .
COPY go.sum .

# Скачиваем все зависимости. Это позволяет эффективно использовать кэш Docker:
# если зависимости не изменились, этот шаг будет быстрым.
RUN go mod download

# Копируем весь исходный код проекта в рабочую директорию контейнера
COPY . .

# Собираем Go приложение.
# -o main: Название выходного файла (исполняемого файла)
# ./...: Собираем все пакеты в текущем модуле (включая internal/model и internal/generator)
RUN CGO_ENABLED=0 GOOS=linux go build -o main ./...

# --- Второй этап сборки: создание легковесного финального образа ---
# Используем минималистичный образ Alpine Linux
FROM alpine:latest

# Устанавливаем сертификаты CA, необходимые для HTTPS и некоторых сетевых операций
# (может понадобиться для OIDC в будущем, хорошая практика)
RUN apk --no-cache add ca-certificates

# Устанавливаем рабочую директорию в финальном образе
WORKDIR /root/

# Копируем собранный исполняемый файл из первого этапа (builder)
COPY --from=builder /app/main .

# Объявляем порт, который приложение слушает (для информации, не публикует порт)
EXPOSE 8080

# Команда, которая будет выполняться при запуске контейнера
CMD ["./main"]